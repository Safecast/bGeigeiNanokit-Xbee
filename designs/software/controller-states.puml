@startuml


state Initializing
Initializing: action: setup ESP32
state PostInitialize
PostInitialize: entry: setWakeupTimer(3 sec)
PostInitialize: action: sleep()
state ConfigMode
state Active
state Reset
Reset: Action: reset config defaults && restart system

state ConfigMode {
    state SetupConfigServer
    SetupConfigServer: entry: setLedColor(serverSetup)
    SetupConfigServer: action: initializeServer()
    state ConfigServerActive
    ConfigServerActive: entry: setLedColor(serverActive)
    ConfigServerActive: action: handleClients()
    ConfigServerActive: exit: stopServer()

    [*] --> SetupConfigServer
    SetupConfigServer --> ConfigServerActive : serverInitialized
    ConfigServerActive --> [*]
}

state Active {

    state InitActive
    InitActive: action: mode = getSavedMode()
    state MobileMode
    MobileMode: entry: reporter.prepare(bluetooth)

    state FixedMode {
        state Disconnected
        Disconnected: entry: setLedColor(disconnected)
        state Connected
        Connected: entry: setLedColor(connected)
        state ConnectionError
        ConnectionError: entry: setLedColor(connectionError)

        [*] -> Disconnected
        Disconnected --> Connected : apiReportSuccess
        Disconnected --> ConnectionError : apiReportFailed
        Connected -> ConnectionError : apiReportFailed
        ConnectionError -> Connected : apiReportSuccess
    }
    FixedMode: entry: reporter.prepare(api, bluetooth)

    [*] --> InitActive
    InitActive --> MobileMode : [mode==mobile]
    InitActive -> FixedMode : [mode==fixed]
    MobileMode -r-> FixedMode : buttonPressed
    FixedMode -l-> MobileMode : buttonPressed

}
Active: action: reporter.run(); sleep()



[*] -> Initializing
Initializing -> PostInitialize : controllerInitialized
PostInitialize -> ConfigMode : buttonPressed
PostInitialize -d-> Active : [t > 3s]
ConfigMode -d-> Active: buttonPressed
Active --> Reset : buttonLongPressed
Reset --> [*] 

@enduml