@startuml

class EspConfig {

}

class ConfigWebServer {

}

class ApiConnector {

}

class Button {

}

class AbstractState {

}

class CircularBuffer {

}

class Context {
  +Context();
  +void set_state(AbstractState* state);
  +void run();
  +void schedule_event(Event_enum event_id);
  +AbstractState* get_current_state() const;
  +void clear_events();
  +void handle_events();
}

class ButtonObserver {
  +void on_button_down(Button* button)
  +void on_button_release(Button* button)
  +void on_button_pressed(Button* button, uint32_t millis)
}

class Controller {
  +Controller();
  +void setup_state_machine();
  +void initialize();
  +void on_button_pressed(Button* button, uint32_t millis) override;
  +EspConfig& get_config();
  +ConfigWebServer& get_ap_server();
  +ApiConnector& get_api_connector();
  +Button& get_mode_button();

  EspConfig _config;
  ConfigWebServer _ap_server;
  ApiConnector _api_connector;
  Button _mode_button;
}

Context -> AbstractState : - _current_state
Context -> CircularBuffer : - _event_queue

Controller -u-|> Context
Controller -u-|> ButtonObserver


enum Event_enum {

}

@enduml